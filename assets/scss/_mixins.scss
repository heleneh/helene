@mixin skinny-hr {
  margin: 1rem 0;
  background-color: transparent;
  width: 50%;
  border-style: solid;
  border-width: 1px;
}

@mixin ease($time) {
  transition: $time ease;
}


@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

//  usage: @include simple_transition(prop 0.5s cubic-bezier(0.16, 0.85, 0.45, 1));
@mixin simple_transition($value) {
  -webkit-transition: $value;
  -moz-transition: $value;
  -ms-transition: $value;
  -o-transition: $value;
  transition: $value;
}


//  usage: @include transition(prop1, prop2, ..., 0.5s cubic-bezier(0.16, 0.85, 0.45, 1));
@mixin transition($args...) {
  $type: nth($args, length($args));
  $props: remove-nth($args, length($args));
  $result: ();

  @for $i from 1 through length($props) {
    $prop: nth($props, $i);
    $result: append($result, $prop);
    $result: append($result, $type);
    @if $i != length($props) {
      $result: append($result, unquote($string: ","));
    }
  }

  @include simple_transition($result);
}

@mixin respond-to-height($media) {
  @if $media == pico-down {
    @media only screen and (max-height: $bp-pico) {
      @content;
    }
  } @else if $media == pico-up {
    @media only screen and (min-height: $bp-pico) {
      @content;
    }
  } @else if $media == tiny-down {
    @media only screen and (max-height: $bp-tiny) {
      @content;
    }
  } @else if $media == tiny-up {
    @media only screen and (min-height: $bp-tiny) {
      @content;
    }
  } @else if $media == small-up {
    @media only screen and (min-height: $bp-small) {
      @content;
    }
  } @else if $media == small-down {
    @media only screen and (max-height: $bp-small) {
      @content;
    }
  } @else if $media == medium-up {
    @media only screen and (min-height: $bp-medium) {
      @content;
    }
  } @else if $media == medium-down {
    @media only screen and (max-height: $bp-medium) {
      @content;
    }
  } @else if $media == large-up {
    @media only screen and (min-height: $bp-large) {
      @content;
    }
  } @else if $media == large-down {
    @media only screen and (max-height: $bp-large) {
      @content;
    }
  } @else if $media == huge-down {
    @media only screen and (max-height: $bp-huge) {
      @content;
    }
  } @else if $media == huge-up {
    @media only screen and (min-height: $bp-huge) {
      @content;
    }
  } @else if $media == huge-down {
    @media only screen and (max-height: $bp-huge) {
      @content;
    }
  } @else if $media == jumbo-up {
    @media only screen and (min-height: $bp-jumbo) {
      @content;
    }
  } @else if $media == jumbo-down {
    @media only screen and (max-height: $bp-jumbo) {
      @content;
    }
  } @else if $media == ludicrous-up {
    @media only screen and (min-height: $bp-ludicrous) {
      @content;
    }
  } @else if $media == jumbo-up {
    @media only screen and (max-height: $bp-ludicrous) {
      @content;
    }
  }
}
@mixin respond-to($media) {
  @if $media == pico-down {
    @media only screen and (max-width: $bp-pico) {
      @content;
    }
  } @else if $media == pico-up {
    @media only screen and (min-width: $bp-pico) {
      @content;
    }
  } @else if $media == tiny-down {
    @media only screen and (max-width: $bp-tiny) {
      @content;
    }
  } @else if $media == tiny-up {
    @media only screen and (min-width: $bp-tiny) {
      @content;
    }
  } @else if $media == small-up {
    @media only screen and (min-width: $bp-small) {
      @content;
    }
  } @else if $media == small-down {
    @media only screen and (max-width: $bp-small) {
      @content;
    }
  } @else if $media == medium-up {
    @media only screen and (min-width: $bp-medium) {
      @content;
    }
  } @else if $media == medium-down {
    @media only screen and (max-width: $bp-medium) {
      @content;
    }
  } @else if $media == large-up {
    @media only screen and (min-width: $bp-large) {
      @content;
    }
  } @else if $media == large-down {
    @media only screen and (max-width: $bp-large) {
      @content;
    }
  } @else if $media == huge-down {
    @media only screen and (max-width: $bp-huge) {
      @content;
    }
  } @else if $media == huge-up {
    @media only screen and (min-width: $bp-huge) {
      @content;
    }
  } @else if $media == huge-down {
    @media only screen and (max-width: $bp-huge) {
      @content;
    }
  } @else if $media == jumbo-up {
    @media only screen and (min-width: $bp-jumbo) {
      @content;
    }
  } @else if $media == jumbo-down {
    @media only screen and (max-width: $bp-jumbo) {
      @content;
    }
  } @else if $media == ludicrous-up {
    @media only screen and (min-width: $bp-ludicrous) {
      @content;
    }
  } @else if $media == jumbo-up {
    @media only screen and (max-width: $bp-ludicrous) {
      @content;
    }
  }
}
